Taaseen Ali, Rubin Peci

C Messenger: A fully fledged messenging system that allows for clients to register
  themselves as users, log in, look for other users in the system to message, and
  create group chats.


User Interaction: The "frontend" which the users will interact with will be through
     the commandline. They will be greated by a directory where they can see how long
     ago their friends were last active, add new friends, create a group chat, respond
     to messages or create new conversations. There will be backend server code to
     handle all user requests.

Techinical Design:
	   Topics covered
	   	  Allocating memory: inevitably used somewhere
		  Files: Most of the persistant data will be stored and read from files
		  File meta data: used during calculation of when users were last online
		  Processes: will be used to prevent the sending of messages from blocking 
		  	incoming messages from being received as well as other necessary asynchronous tasks.
		  Signals: Signal handling will be used to handle forced user log offs
		  Pipes: Integral to server/client communication
		  Shared Memory: Will be used for different subprocesses to be able to notify each other of 
		  	new events that have occured (eg new message alert, new friend request)
		  Semaphores: will be used for facilitating group chats
		  Networking: allowing for people to talk over an internet connection


	Split up of work:
	      Most of we plan to do together collaboratively but the split up is currently:
	      Taaseen -- Networking, group chats, messaging
	      Rubin -- Profile setup, log in stuff, serverside code

	      Data Structures:
	      	   We plan on creating our own structs to model things like different profiles
		   We are planning on creating a database to store much of the serverside data
		   associated with the project.

	Algorithms:
		We don't have a set server/client model as of yet, but are currently looking
		at different ways that we would handle multiple users while also delivering
		the functionality that we need.

Timeline:
	1)Basic server/client setup done
	2)Creating framework for user to be created and registered (database)
	3)Allowing for user log ins
	4)Creating friend system
	5)Adding messaging functionality
	6)Adding online/offline functionality
	7)Adding group messaging functionality
